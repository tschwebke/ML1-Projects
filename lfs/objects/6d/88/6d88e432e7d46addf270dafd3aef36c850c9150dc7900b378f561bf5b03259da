{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression and Support Vector Machine\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table of Contents<a id='TOC'></a>\n",
    "---\n",
    "1. <a href='#test-train'>Test/Train</a><br>\n",
    "2. <a href='#models'>Models</a><br>\n",
    "2.1 <a href='#logistic-regression'>Logistic Regression</a><br>\n",
    "2.2 <a href='#support-vector-machine'>Support Vector Machine</a><br>\n",
    "3. <a href='#model-analysis'>Model Analysis</a><br>\n",
    "3.1 <a href='#logistic-regression-weights'>Logit Weights</a><br>\n",
    "3.2 <a href='#support-vector'>Support Vectors</a><br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Libraries & Data <a id='libraries-data'></a>\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "code_show=true; \n",
       "function code_toggle() {\n",
       " if (code_show){\n",
       " $('div.input').hide();\n",
       " } else {\n",
       " $('div.input').show();\n",
       " }\n",
       " code_show = !code_show\n",
       "} \n",
       "$( document ).ready(code_toggle);\n",
       "</script>\n",
       "<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import HTML\n",
    "\n",
    "HTML('''<script>\n",
    "code_show=true; \n",
    "function code_toggle() {\n",
    " if (code_show){\n",
    " $('div.input').hide();\n",
    " } else {\n",
    " $('div.input').show();\n",
    " }\n",
    " code_show = !code_show\n",
    "} \n",
    "$( document ).ready(code_toggle);\n",
    "</script>\n",
    "<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on/off the raw code.\"></form>''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Libraries\n",
    "# IMPORT LIBRARIES\n",
    "# hide warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# all imported libraries used for analysis\n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "import os \n",
    "import plotly \n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline \n",
    "import statsmodels.api as sm\n",
    "\n",
    "from itertools import chain\n",
    "from geopy.geocoders import Nominatim\n",
    "from pandas.plotting import scatter_matrix\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn import metrics as mt\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import plot_confusion_matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import ShuffleSplit\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.utils import resample"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial Data Load and Cleaning\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the database.csv file and store in a dataframe\n",
    "df=pd.read_csv('../Data/database.csv')\n",
    "df_ = df # create another data frame to preserve the original\n",
    "\n",
    "#-------------------------------------------------------------#\n",
    "# clean data, there is a space for perpetrator ago (error in data entry)\n",
    "blank_index = df_.loc[df_['Perpetrator Age']== ' '].index.values[0]\n",
    "df_.at[blank_index, 'Perpetrator Age'] = '0'\n",
    "\n",
    "#-------------------------------------------------------------#\n",
    "# convert perpetrator age to int rather than object\n",
    "df_['Perpetrator Age'] = df_['Perpetrator Age'].astype(int)\n",
    "\n",
    "#-------------------------------------------------------------#\n",
    "#Binning Age\n",
    "age_bins = np.array([0,10,20,30,40,50,60,70,80,90,100,998])\n",
    "age_labels = ['0-10', '11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90', '91-100', '998']\n",
    "df_[\"Victim_Age_Group\"] = pd.cut(df_['Victim Age'].astype(int), age_bins, labels=age_labels, include_lowest=True)\n",
    "# df_['Perpetrator Age']=df_['Perpetrator Age'].replace(to_replace=\" \",value=0)\n",
    "# df_['Perpetrator Age'] = df_['Perpetrator Age'].astype(int)\n",
    "df_['Perpetrator_Age_Group'] = pd.cut(df_['Perpetrator Age'].astype(int), age_bins, labels=age_labels, include_lowest=True)\n",
    "\n",
    "#-------------------------------------------------------------#\n",
    "# combine Victim and Perpetrator Race & Ethnicity into new features - Victim_Race_Ethnicity and Perpetrator_Race_Ethnicity\n",
    "df_['Perpetrator_Race_Ethnicity'] = df_['Perpetrator Race'] + ', ' + df_['Perpetrator Ethnicity']\n",
    "df_['Perpetrator_Race_Ethnicity'] = df_['Perpetrator_Race_Ethnicity'].str.replace(', Unknown', '')\n",
    "\n",
    "#-------------------------------------------------------------#\n",
    "# rebucket all replationships into new relationships which are more general\n",
    "relationship_dict = {\n",
    "    'Female Partner': ['Wife', 'Girlfriend', 'Ex-Wife', 'Common-Law Wife'],\n",
    "    'Male Partner': ['Ex-Husband', 'Husband','Boyfriend', 'Common-Law Husband'],\n",
    "    'Parent': ['Father','In-Law','Mother','Stepfather','Stepmother'],\n",
    "    'Children': ['Daughter', 'Son', 'Stepdaughter','Stepson'],\n",
    "    'Sibling': ['Brother', 'Sister'],\n",
    "    'Work': ['Employee', 'Employer']\n",
    "}\n",
    "df_['Relationship_Group'] = df_['Relationship']\n",
    "rel_replace = [[key for key, value in relationship_dict.items() if val in value][0] if len([key for key, value in relationship_dict.items() if val in value]) >0 else val for val in df_['Relationship_Group']]\n",
    "df_['Relationship_Group'] = rel_replace\n",
    "#-------------------------------------------------------------#\n",
    "# data wrangling, clean-up, rename headers, drop columns, change data types, and transforms\n",
    "# change crime solved values - Yes = 1 and No = 0 \n",
    "df_['Crime Solved']=df_['Crime Solved'].replace(to_replace='No',value=0)\n",
    "df_['Crime Solved']=df_['Crime Solved'].replace(to_replace='Yes',value=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Drop Features\n",
    "1. Record ID: this is an index column, since dataframes naturally index, there is no need for this attribute\n",
    "2. Incident: representing the case number, this is not helpful in the analysis\n",
    "3. Relationship: due to the regrouping of relationship, this column is repetitive\n",
    "4. Victim Count is removed since every victim has a unique record, hence this is redundent data\n",
    "5. Record Source: another id method for the records, this is similar to incident\n",
    "6. City, Agency Type, and Agency Name are dropped since Agency code is a concatenation of all 3 and this reduces the computation time required\n",
    "7. While the age groups were binned, for the models below, the original ages are necessary for model analysis, hence, they're removed for these purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean = df_.drop(['Record ID', 'Incident', 'Relationship', 'Victim Count',\n",
    "                     'Record Source','Perpetrator Race','Perpetrator Ethnicity',\n",
    "                    'City','Agency Type', 'Agency Name','Victim_Age_Group', \n",
    "                     'Perpetrator_Age_Group'#'Agency Code'\n",
    "                    ], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dummy Coding\n",
    "The categorical data is dummy coded before being rejoined with the continuous data. All columns which are objects are first converted to categories prior to ensure the correct type of data is transformed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency Code</th>\n",
       "      <th>State</th>\n",
       "      <th>Month</th>\n",
       "      <th>Crime Type</th>\n",
       "      <th>Victim Sex</th>\n",
       "      <th>Victim Race</th>\n",
       "      <th>Victim Ethnicity</th>\n",
       "      <th>Perpetrator Sex</th>\n",
       "      <th>Weapon</th>\n",
       "      <th>Perpetrator_Race_Ethnicity</th>\n",
       "      <th>Relationship_Group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AK00101</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>January</td>\n",
       "      <td>Murder or Manslaughter</td>\n",
       "      <td>Male</td>\n",
       "      <td>Native American/Alaska Native</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Male</td>\n",
       "      <td>Blunt Object</td>\n",
       "      <td>Native American/Alaska Native</td>\n",
       "      <td>Acquaintance</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Agency Code   State    Month              Crime Type Victim Sex  \\\n",
       "0     AK00101  Alaska  January  Murder or Manslaughter       Male   \n",
       "\n",
       "                     Victim Race Victim Ethnicity Perpetrator Sex  \\\n",
       "0  Native American/Alaska Native          Unknown            Male   \n",
       "\n",
       "         Weapon     Perpetrator_Race_Ethnicity Relationship_Group  \n",
       "0  Blunt Object  Native American/Alaska Native       Acquaintance  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert objects to categories\n",
    "obj = df_clean.select_dtypes(include=['object']).columns\n",
    "for col in obj:\n",
    "    df_clean[col] = df_clean[col].astype('category')\n",
    "df_obj = df_clean[obj.values]\n",
    "df_obj.head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function below transforms the required columns into dummy coded variablesby taking in the dataframe and columns which require transformation, creates a new dataframe, and then converts the appropriate columns into dummy coded data. The cell below passes the categorical columns and dataframe, displaying the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#-------------------------------------------------------------#\n",
    "#dummy code categorical variables and remove categorical variables\n",
    "#dummy coding categorical vars\n",
    "def dummy_code(col, df): # input the column names and dataframe\n",
    "    df_dummy = pd.DataFrame()\n",
    "    for val in col:\n",
    "        df_dummy_temp = pd.get_dummies(df[val], prefix=val, sparse=True)\n",
    "        df_dummy = pd.concat([df_dummy, df_dummy_temp], axis=1, sort=False)\n",
    "    return df_dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency Code_AK00101</th>\n",
       "      <th>Agency Code_AK00102</th>\n",
       "      <th>Agency Code_AK00103</th>\n",
       "      <th>Agency Code_AK00104</th>\n",
       "      <th>Agency Code_AK00105</th>\n",
       "      <th>Agency Code_AK00106</th>\n",
       "      <th>Agency Code_AK00107</th>\n",
       "      <th>Agency Code_AK00108</th>\n",
       "      <th>Agency Code_AK00109</th>\n",
       "      <th>Agency Code_AK00110</th>\n",
       "      <th>...</th>\n",
       "      <th>Relationship_Group_Family</th>\n",
       "      <th>Relationship_Group_Female Partner</th>\n",
       "      <th>Relationship_Group_Friend</th>\n",
       "      <th>Relationship_Group_Male Partner</th>\n",
       "      <th>Relationship_Group_Neighbor</th>\n",
       "      <th>Relationship_Group_Parent</th>\n",
       "      <th>Relationship_Group_Sibling</th>\n",
       "      <th>Relationship_Group_Stranger</th>\n",
       "      <th>Relationship_Group_Unknown</th>\n",
       "      <th>Relationship_Group_Work</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 12126 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Agency Code_AK00101  Agency Code_AK00102  Agency Code_AK00103  \\\n",
       "0                    1                    0                    0   \n",
       "1                    1                    0                    0   \n",
       "2                    1                    0                    0   \n",
       "3                    1                    0                    0   \n",
       "4                    1                    0                    0   \n",
       "\n",
       "   Agency Code_AK00104  Agency Code_AK00105  Agency Code_AK00106  \\\n",
       "0                    0                    0                    0   \n",
       "1                    0                    0                    0   \n",
       "2                    0                    0                    0   \n",
       "3                    0                    0                    0   \n",
       "4                    0                    0                    0   \n",
       "\n",
       "   Agency Code_AK00107  Agency Code_AK00108  Agency Code_AK00109  \\\n",
       "0                    0                    0                    0   \n",
       "1                    0                    0                    0   \n",
       "2                    0                    0                    0   \n",
       "3                    0                    0                    0   \n",
       "4                    0                    0                    0   \n",
       "\n",
       "   Agency Code_AK00110  ...  Relationship_Group_Family  \\\n",
       "0                    0  ...                          0   \n",
       "1                    0  ...                          0   \n",
       "2                    0  ...                          0   \n",
       "3                    0  ...                          0   \n",
       "4                    0  ...                          0   \n",
       "\n",
       "   Relationship_Group_Female Partner  Relationship_Group_Friend  \\\n",
       "0                                  0                          0   \n",
       "1                                  0                          0   \n",
       "2                                  0                          0   \n",
       "3                                  0                          0   \n",
       "4                                  0                          0   \n",
       "\n",
       "   Relationship_Group_Male Partner  Relationship_Group_Neighbor  \\\n",
       "0                                0                            0   \n",
       "1                                0                            0   \n",
       "2                                0                            0   \n",
       "3                                0                            0   \n",
       "4                                0                            0   \n",
       "\n",
       "   Relationship_Group_Parent  Relationship_Group_Sibling  \\\n",
       "0                          0                           0   \n",
       "1                          0                           0   \n",
       "2                          0                           0   \n",
       "3                          0                           0   \n",
       "4                          0                           0   \n",
       "\n",
       "   Relationship_Group_Stranger  Relationship_Group_Unknown  \\\n",
       "0                            0                           0   \n",
       "1                            0                           0   \n",
       "2                            0                           1   \n",
       "3                            0                           0   \n",
       "4                            0                           1   \n",
       "\n",
       "   Relationship_Group_Work  \n",
       "0                        0  \n",
       "1                        0  \n",
       "2                        0  \n",
       "3                        0  \n",
       "4                        0  \n",
       "\n",
       "[5 rows x 12126 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dummy = dummy_code(obj.values, df_obj)\n",
    "df_dummy.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The continuous variables are then added back into the dataframe for the final transformed dummy coded data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency Code_AK00101</th>\n",
       "      <th>Agency Code_AK00102</th>\n",
       "      <th>Agency Code_AK00103</th>\n",
       "      <th>Agency Code_AK00104</th>\n",
       "      <th>Agency Code_AK00105</th>\n",
       "      <th>Agency Code_AK00106</th>\n",
       "      <th>Agency Code_AK00107</th>\n",
       "      <th>Agency Code_AK00108</th>\n",
       "      <th>Agency Code_AK00109</th>\n",
       "      <th>Agency Code_AK00110</th>\n",
       "      <th>...</th>\n",
       "      <th>Relationship_Group_Parent</th>\n",
       "      <th>Relationship_Group_Sibling</th>\n",
       "      <th>Relationship_Group_Stranger</th>\n",
       "      <th>Relationship_Group_Unknown</th>\n",
       "      <th>Relationship_Group_Work</th>\n",
       "      <th>Year</th>\n",
       "      <th>Crime Solved</th>\n",
       "      <th>Victim Age</th>\n",
       "      <th>Perpetrator Age</th>\n",
       "      <th>Perpetrator Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1980</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1980</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 12131 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Agency Code_AK00101  Agency Code_AK00102  Agency Code_AK00103  \\\n",
       "0                    1                    0                    0   \n",
       "1                    1                    0                    0   \n",
       "\n",
       "   Agency Code_AK00104  Agency Code_AK00105  Agency Code_AK00106  \\\n",
       "0                    0                    0                    0   \n",
       "1                    0                    0                    0   \n",
       "\n",
       "   Agency Code_AK00107  Agency Code_AK00108  Agency Code_AK00109  \\\n",
       "0                    0                    0                    0   \n",
       "1                    0                    0                    0   \n",
       "\n",
       "   Agency Code_AK00110  ...  Relationship_Group_Parent  \\\n",
       "0                    0  ...                          0   \n",
       "1                    0  ...                          0   \n",
       "\n",
       "   Relationship_Group_Sibling  Relationship_Group_Stranger  \\\n",
       "0                           0                            0   \n",
       "1                           0                            0   \n",
       "\n",
       "   Relationship_Group_Unknown  Relationship_Group_Work  Year  Crime Solved  \\\n",
       "0                           0                        0  1980             1   \n",
       "1                           0                        0  1980             1   \n",
       "\n",
       "   Victim Age  Perpetrator Age  Perpetrator Count  \n",
       "0          14               15                  0  \n",
       "1          43               42                  0  \n",
       "\n",
       "[2 rows x 12131 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat = df_clean.select_dtypes(exclude=['category']).columns\n",
    "df_dummy = df_dummy.merge(df[cat], on=None, left_index=True, right_index=True, how='outer')\n",
    "df_dummy.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One Hot Encoding\n",
    "One hot encoding can be particularly helpful with sparse data. By saving the sparse data on the backend as an object, this lowers the computational time required for the data transformation and model creation. While this code was run, the kernel repeatedly dies during the train split of the kernel and was not used for further analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# one hot encode\n",
    "enc = OneHotEncoder(handle_unknown='ignore', sparse=True)\n",
    "df_encoded = enc.fit(df_obj.astype(str)).transform(df_obj.astype(str)).toarray()\n",
    "names = enc.get_feature_names(df_obj.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency Code_AK00101</th>\n",
       "      <th>Agency Code_AK00102</th>\n",
       "      <th>Agency Code_AK00103</th>\n",
       "      <th>Agency Code_AK00104</th>\n",
       "      <th>Agency Code_AK00105</th>\n",
       "      <th>Agency Code_AK00106</th>\n",
       "      <th>Agency Code_AK00107</th>\n",
       "      <th>Agency Code_AK00108</th>\n",
       "      <th>Agency Code_AK00109</th>\n",
       "      <th>Agency Code_AK00110</th>\n",
       "      <th>...</th>\n",
       "      <th>Relationship_Group_Parent</th>\n",
       "      <th>Relationship_Group_Sibling</th>\n",
       "      <th>Relationship_Group_Stranger</th>\n",
       "      <th>Relationship_Group_Unknown</th>\n",
       "      <th>Relationship_Group_Work</th>\n",
       "      <th>Year</th>\n",
       "      <th>Crime Solved</th>\n",
       "      <th>Victim Age</th>\n",
       "      <th>Perpetrator Age</th>\n",
       "      <th>Perpetrator Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1980</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1980</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 12131 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Agency Code_AK00101  Agency Code_AK00102  Agency Code_AK00103  \\\n",
       "0                  1.0                  0.0                  0.0   \n",
       "1                  1.0                  0.0                  0.0   \n",
       "\n",
       "   Agency Code_AK00104  Agency Code_AK00105  Agency Code_AK00106  \\\n",
       "0                  0.0                  0.0                  0.0   \n",
       "1                  0.0                  0.0                  0.0   \n",
       "\n",
       "   Agency Code_AK00107  Agency Code_AK00108  Agency Code_AK00109  \\\n",
       "0                  0.0                  0.0                  0.0   \n",
       "1                  0.0                  0.0                  0.0   \n",
       "\n",
       "   Agency Code_AK00110  ...  Relationship_Group_Parent  \\\n",
       "0                  0.0  ...                        0.0   \n",
       "1                  0.0  ...                        0.0   \n",
       "\n",
       "   Relationship_Group_Sibling  Relationship_Group_Stranger  \\\n",
       "0                         0.0                          0.0   \n",
       "1                         0.0                          0.0   \n",
       "\n",
       "   Relationship_Group_Unknown  Relationship_Group_Work  Year  Crime Solved  \\\n",
       "0                         0.0                      0.0  1980             1   \n",
       "1                         0.0                      0.0  1980             1   \n",
       "\n",
       "   Victim Age  Perpetrator Age  Perpetrator Count  \n",
       "0          14               15                  0  \n",
       "1          43               42                  0  \n",
       "\n",
       "[2 rows x 12131 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create dataframe and merge integer values\n",
    "df_ohc = pd.DataFrame(df_encoded, columns=names)\n",
    "for val in cat:\n",
    "    df_ohc[val] = df[val]\n",
    "df_ohc.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Test/Train Split <a id='test-train'></a>\n",
    "---\n",
    "The test train splits are used for cross validatoion and reduction of bias in the model with respect to the training dataset. There are a multitude of methods which can be applied. For the purposes of this data, the methods will be a scaled split, K-fold Cross Validation, stratified, shuffle and downsampled. Each method is described in greater detail below. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Original \n",
    "---\n",
    "Test/Train split of 80/20. The seed is set to ensure replicable results. The dataset randomly selects 35000 rows for quicker process time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dummy_original = df_dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dummy = df_dummy.sample(35000).reset_index().drop(['index'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train/Test Split 0.8/0.2\n",
    "# set seed\n",
    "random.seed(123)\n",
    "#-------------------------------------------------------------#\n",
    "# split into train/test\n",
    "y = df_dummy['Crime Solved']\n",
    "x = df_dummy.drop(['Crime Solved'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scale\n",
    "***Scale*** the data to prevent bias in the model.Since the dummy coded variables are already 0-1, only the continuous variables are transformed. By scaling the data, this prevents data with higher values from automatically being considered as more significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scale the data\n",
    "# scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "cat_x = list(np.delete(cat.values,1))\n",
    "# X_cont = scaler.fit_transform(x[cat_x])\n",
    "scl_obj = StandardScaler()\n",
    "scl_obj.fit(x[cat_x])\n",
    "X_cont = scl_obj.transform(x[cat_x]) \n",
    "df_X_cont = pd.DataFrame(X_cont, columns=cat_x)\n",
    "X = pd.merge(x.drop(cat_x, axis=1), df_X_cont, on=None, left_index=True, right_index=True, how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training records: 17500, Test records: 17500\n"
     ]
    }
   ],
   "source": [
    "x_train,x_test,y_train,y_test= train_test_split(X,y,test_size=0.5)\n",
    "print('Training records: ' + str(len(x_train))+', Test records: ' + str(len(x_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### K-fold Cross Validation Split\n",
    "K-fold CV is a method in which the data is split into k number of sets, in which one of the k sets are selected as the test set, and the remainder become the training dataset. The model is trained and tested, the score retained before discarding the model. Another of the k sets are selected as the test set and the model generation continues until all of the k sets have been the test set at least once. This assists in reducing the effects of overfitting and providing a more robust average of the scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#added some parameters\n",
    "kf = KFold(n_splits = 3, shuffle = True, random_state = 2)\n",
    "for train_index, test_index in kf.split(X):\n",
    "    # Split train-test\n",
    "    kf_X_train, kf_X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    kf_y_train, kf_y_test = y[train_index], y[test_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training records: 23334, Test records: 11666\n"
     ]
    }
   ],
   "source": [
    "print('Training records: ' + str(len(kf_X_train))+', Test records: ' + str(len(kf_X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stratified Test/Train Split\n",
    "Stratified test/train split is a method which ensures that the proportion of classes are identical. For example, if an attribute has 2 classes (yes, no) and the data set is unbalanced, where yes is 60% and no is 40%, the training and test split will both have ratios of yes/no as 60/40. This ensures that all yes or all nos are not in a single dataset, potenially skewing the model, or resulting in an inaccurate model.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training records: 17500, Test records: 17500\n"
     ]
    }
   ],
   "source": [
    "st_X_train, st_X_test, st_y_train, st_y_test = train_test_split(X, y, stratify=y, test_size=0.5)\n",
    "print('Training records: ' + str(len(st_X_train))+', Test records: ' + str(len(st_X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Shuffle Split\n",
    "While shuffle split may initally appear similar to k-fold split, the difference remains within the methods of which the data is separated. K-fold splits the data into K number of groups, while shuffle split iterates through X times, splits the data into the test/train sets into the size required. During each iteration, the dataset is shuffled and the split occurs on the shuffled entire data. This means that some splits will have the same data in the test/train as a previous, but due to the shuffling, it should result in different combinations of data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ShuffleSplit(n_splits=3, random_state=123, test_size=0.2, train_size=None)\n"
     ]
    }
   ],
   "source": [
    "num_cv_iterations = 3\n",
    "num_instances = len(y.values)\n",
    "cv_object = ShuffleSplit(n_splits=num_cv_iterations,\n",
    "                        random_state=123,\n",
    "                        test_size  = 0.2)\n",
    "                         \n",
    "print(cv_object)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Down Sampled Test/Train Split\n",
    "Another method for handling unbalanced data is downsampling or upsampling the training set to have equal numbers of classes. In downsampling, the dataset is split and the majority group is downsized to match the minority group. Upsampling requires the creation of additional minority data to balance the groups. In the example below, the dataset is split into the test/train, downsampled to ensure that the minority group is also in the test set, before resplitting based off the downsampled training set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_df_dummy = df_dummy_original.sample(95000,random_state=2).reset_index().drop(['index'], axis=1)\n",
    "d_x = ds_df_dummy.drop('Crime Solved', axis=1)\n",
    "d_y = ds_df_dummy['Crime Solved']\n",
    "d_x_train,d_x_test,d_y_train,d_y_test = train_test_split(d_x,d_y,test_size=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Downsampling\n",
    "training_df = d_x_train\n",
    "training_df['Crime Solved'] = d_y_train\n",
    "\n",
    "# Separate majority and minority classes\n",
    "df_majority = training_df[training_df['Crime Solved']==1]\n",
    "df_minority = training_df[training_df['Crime Solved']==0]\n",
    "      \n",
    "# Downsample majority class\n",
    "quarter = int(round(len(df)/4,0))\n",
    "df_majority_downsampled = resample(df_majority, replace=False, n_samples=len(df_minority), random_state=123) \n",
    " \n",
    "# # Combine minority class with downsampled majority class\n",
    "df_downsampled = pd.concat([df_majority_downsampled, df_minority])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual no. of records: 66960, expected no. of records: 66960\n",
      "Validation Complete\n"
     ]
    }
   ],
   "source": [
    "# Final train/test split (80/20)\n",
    "df_training = df_downsampled.reset_index()\n",
    "index_train = df_training['index']\n",
    "df_training = df_training.drop('index', axis=1)\n",
    "\n",
    "# index_train.values\n",
    "full_ind = ds_df_dummy.index.values\n",
    "train_ind = index_train.values\n",
    "mask = np.isin(full_ind, train_ind, invert=True)\n",
    "test_ind = full_ind[mask]\n",
    "print('Actual no. of records: ' + str(len(test_ind))+', expected no. of records: ' + str(len(ds_df_dummy) - len(index_train.values) ))\n",
    "if len(test_ind) == (len(ds_df_dummy) - len(index_train.values)):\n",
    "    df_test = ds_df_dummy.iloc[test_ind]\n",
    "#     train_amt = quarter*2\n",
    "#     test_amt = quarter\n",
    "    print('Validation Complete')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Set:0.2951578947368421 Test Set:0.7048421052631579\n"
     ]
    }
   ],
   "source": [
    "print(f'Train Set:{len(df_training)/len(ds_df_dummy)} Test Set:{len(df_test)/len(ds_df_dummy)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training records: 28040, Test records: 66960\n"
     ]
    }
   ],
   "source": [
    "ds_x_train = df_training.drop('Crime Solved', axis=1)\n",
    "ds_x_test =  df_test.drop('Crime Solved', axis=1)\n",
    "ds_y_train = df_training['Crime Solved']\n",
    "ds_y_test = df_test['Crime Solved']\n",
    "print('Training records: ' + str(len(ds_x_train))+', Test records: ' + str(len(ds_x_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create final dictionary which hold all test/train datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_dict = {\n",
    "    \"Original Scaled\": [x_train,x_test,y_train,y_test],\n",
    "    \"K-fold\": kf.split(X),\n",
    "    \"Stratified\": [st_X_train, st_X_test, st_y_train, st_y_test],\n",
    "    \"Shuffle Split\": cv_object.split(X,y),\n",
    "    \"Down Sample\": [ds_x_train, ds_x_test, ds_y_train, ds_y_test]\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Models <a id='models'></a>\n",
    "---\n",
    "Create a logistic regression model and a support vector machine model for the\n",
    "classification task involved with your dataset. Assess how well each model performs (use\n",
    "80/20 training/testing split for your data). Adjust parameters of the models to make them more\n",
    "accurate. If your dataset size requires the use of stochastic gradient descent, then linear kernel\n",
    "only is fine to use."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Assumptions***<br>\n",
    "-fill out all assumptions made-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 Logistic Regression <a id='logistic-regression'></a>\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# feature selection\n",
    "# def select_features(X_train, y_train, X_test):\n",
    "#     fs = SelectKBest(score_func=chi2, k='all')\n",
    "#     fs.fit(X_train, y_train)\n",
    "#     X_train_fs = fs.transform(X_train)\n",
    "#     X_test_fs = fs.transform(X_test)\n",
    "#     return X_train_fs, X_test_fs, fs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# feature selection\n",
    "# X_train_fs, X_test_fs, fs = select_features(x_train, y_train, x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# features = pd.DataFrame()\n",
    "# features['Attributes'] = x_test.columns\n",
    "# features['Feature Selection'] = fs.scores_.round(2)\n",
    "# features.sort_values(by='Feature Selection', ascending=False).head(5)\n",
    "\n",
    "# what are scores for the features\n",
    "# fig = px.bar(features, x='Attributes', y='Feature Selection')\n",
    "# fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function is reusable for all test/train splits used in the model analysis.<br>\n",
    "1. It runs the logistic regression\n",
    "2. Extracts all statistical metric and inputs it into a dataframe\n",
    "3. Extracts all weights associated with the model and inputs into a dataframe\n",
    "4. Both the staticial and weight dataframes are returned for additional analysis \n",
    "\n",
    "As for the assumptions for logistic regression the primary focus of colinearity is addressed in EDA, where the pairs matrix revealed no multilinearity. While record id, agency code with city, etc. were related, this is eliminated during the data cleaning phase. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for logistic regression\n",
    "df_models = pd.DataFrame(columns=['model', 'accuracy','precision', 'AUC'])\n",
    "df_weights = pd.DataFrame(columns=['model', 'attribute', 'weight'])\n",
    "def logit(X_train, y_train, X_test, y_test, df_models, df_weights, name):\n",
    "    print(f'Logistic Regression for {name}')\n",
    "    lgt = LogisticRegression(penalty='l2', C=1.0, class_weight=None, solver='liblinear')\n",
    "    lgt.fit(X_train,y_train)  # train object\n",
    "    y_hat = lgt.predict(X_test) # get test set precitions\n",
    "\n",
    "    # now let's get the accuracy and confusion matrix for this iterations of training/testing\n",
    "    acc = mt.accuracy_score(y_test,y_hat)\n",
    "    conf = mt.confusion_matrix(y_test,y_hat)\n",
    "    prec = mt.precision_score(y_test,y_hat)\n",
    "    auc = mt.roc_auc_score(y_test,y_hat)\n",
    "    rec = mt.recall_score(y_test,y_hat)\n",
    "    \n",
    "    # print results\n",
    "    print(f'Accuracy is {acc}')\n",
    "    print(f'Confusion matrix is \\n{conf}')\n",
    "    print(f'Classification Report \\n{classification_report(y_test,y_hat)}')\n",
    "    print('--------------------------------------------------------------')\n",
    "    \n",
    "    # statistics dataframe\n",
    "    df_models = df_models.append({'model':name, 'accuracy':acc, 'precision':prec, 'AUC':auc}, ignore_index=True)\n",
    "\n",
    "    # weights dataframe\n",
    "    df_weights_temp = pd.DataFrame(columns=['model', 'attribute', 'weight'])\n",
    "    df_weights_temp['weight'] = list(chain(*lgt.coef_))\n",
    "    df_weights_temp['attribute'] = X_train.columns\n",
    "    df_weights_temp['model'] = [name for x in range(len(X_train.columns))]\n",
    "    try:\n",
    "        df_weights = pd.concat([df_weights, df_weights_temp], axis=0, ignore_index=True)\n",
    "    except:\n",
    "        df_weights = df_weights_temp\n",
    "    \n",
    "    return df_models, df_weights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Statistics\n",
    "All five models are run, with confustion matrixes and classification reports. \n",
    "\n",
    "Over all, all models had similar precision and accuracy, except for downsampled data. Sensitivity and specificity do not appear to be a concern cosidering all performed with similar scores and returning values higher than 0.99 in nearly all cases. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression for Original Scaled\n",
      "Accuracy is 0.9996571428571429\n",
      "Confusion matrix is \n",
      "[[ 5187     4]\n",
      " [    2 12307]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5191\n",
      "           1       1.00      1.00      1.00     12309\n",
      "\n",
      "    accuracy                           1.00     17500\n",
      "   macro avg       1.00      1.00      1.00     17500\n",
      "weighted avg       1.00      1.00      1.00     17500\n",
      "\n",
      "--------------------------------------------------------------\n",
      "kfold 1\n",
      "Logistic Regression for K-fold\n",
      "Accuracy is 0.9995714408159767\n",
      "Confusion matrix is \n",
      "[[3501    2]\n",
      " [   3 8161]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      3503\n",
      "           1       1.00      1.00      1.00      8164\n",
      "\n",
      "    accuracy                           1.00     11667\n",
      "   macro avg       1.00      1.00      1.00     11667\n",
      "weighted avg       1.00      1.00      1.00     11667\n",
      "\n",
      "--------------------------------------------------------------\n",
      "kfold 2\n",
      "Logistic Regression for K-fold\n",
      "Accuracy is 0.9999142881631954\n",
      "Confusion matrix is \n",
      "[[3497    1]\n",
      " [   0 8169]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      3498\n",
      "           1       1.00      1.00      1.00      8169\n",
      "\n",
      "    accuracy                           1.00     11667\n",
      "   macro avg       1.00      1.00      1.00     11667\n",
      "weighted avg       1.00      1.00      1.00     11667\n",
      "\n",
      "--------------------------------------------------------------\n",
      "kfold 3\n",
      "Logistic Regression for K-fold\n",
      "Accuracy is 0.9994856848962798\n",
      "Confusion matrix is \n",
      "[[3454    3]\n",
      " [   3 8206]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      3457\n",
      "           1       1.00      1.00      1.00      8209\n",
      "\n",
      "    accuracy                           1.00     11666\n",
      "   macro avg       1.00      1.00      1.00     11666\n",
      "weighted avg       1.00      1.00      1.00     11666\n",
      "\n",
      "--------------------------------------------------------------\n",
      "Logistic Regression for Stratified\n",
      "Accuracy is 0.9997142857142857\n",
      "Confusion matrix is \n",
      "[[ 5227     2]\n",
      " [    3 12268]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      5229\n",
      "           1       1.00      1.00      1.00     12271\n",
      "\n",
      "    accuracy                           1.00     17500\n",
      "   macro avg       1.00      1.00      1.00     17500\n",
      "weighted avg       1.00      1.00      1.00     17500\n",
      "\n",
      "--------------------------------------------------------------\n",
      "statify 1\n",
      "Logistic Regression for Shuffle Split\n",
      "Accuracy is 0.9998571428571429\n",
      "Confusion matrix is \n",
      "[[2094    0]\n",
      " [   1 4905]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      2094\n",
      "           1       1.00      1.00      1.00      4906\n",
      "\n",
      "    accuracy                           1.00      7000\n",
      "   macro avg       1.00      1.00      1.00      7000\n",
      "weighted avg       1.00      1.00      1.00      7000\n",
      "\n",
      "--------------------------------------------------------------\n",
      "statify 2\n",
      "Logistic Regression for Shuffle Split\n",
      "Accuracy is 0.9994285714285714\n",
      "Confusion matrix is \n",
      "[[2113    1]\n",
      " [   3 4883]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      2114\n",
      "           1       1.00      1.00      1.00      4886\n",
      "\n",
      "    accuracy                           1.00      7000\n",
      "   macro avg       1.00      1.00      1.00      7000\n",
      "weighted avg       1.00      1.00      1.00      7000\n",
      "\n",
      "--------------------------------------------------------------\n",
      "statify 3\n",
      "Logistic Regression for Shuffle Split\n",
      "Accuracy is 1.0\n",
      "Confusion matrix is \n",
      "[[2073    0]\n",
      " [   0 4927]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00      2073\n",
      "           1       1.00      1.00      1.00      4927\n",
      "\n",
      "    accuracy                           1.00      7000\n",
      "   macro avg       1.00      1.00      1.00      7000\n",
      "weighted avg       1.00      1.00      1.00      7000\n",
      "\n",
      "--------------------------------------------------------------\n",
      "Logistic Regression for Down Sample\n",
      "Accuracy is 0.99972894015601\n",
      "Confusion matrix is \n",
      "[[14023     3]\n",
      " [   15 52365]]\n",
      "Classification Report \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     14026\n",
      "           1       1.00      1.00      1.00     52380\n",
      "\n",
      "    accuracy                           1.00     66406\n",
      "   macro avg       1.00      1.00      1.00     66406\n",
      "weighted avg       1.00      1.00      1.00     66406\n",
      "\n",
      "--------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "for key in dataset_dict:\n",
    "    splits = dataset_dict[key]\n",
    "    if key == \"K-fold\":\n",
    "        counter = 0\n",
    "        for train_index, test_index in splits:\n",
    "            counter += 1\n",
    "            print(f'kfold {counter}')\n",
    "            # Split train-test\n",
    "            kf_X_train, kf_X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "            kf_y_train, kf_y_test = y[train_index], y[test_index]\n",
    "            df_models, df_weights = logit(kf_X_train,kf_y_train, kf_X_test, kf_y_test, df_models, df_weights, key)\n",
    "    elif key == \"Shuffle Split\":\n",
    "        counter = 0\n",
    "        for train_indices, test_indices in splits:\n",
    "            counter += 1\n",
    "            print(f'statify {counter}')\n",
    "            ss_X_train = X.iloc[train_indices]\n",
    "            ss_y_train = y[train_indices]\n",
    "            ss_X_test = X.iloc[test_indices]\n",
    "            ss_y_test = y[test_indices]\n",
    "            df_models, df_weights = logit(ss_X_train,ss_y_train, ss_X_test, ss_y_test, df_models, df_weights, key)\n",
    "    else:\n",
    "        try:\n",
    "            df_models, df_weights = logit(splits[0],splits[2], splits[1], splits[3], df_models, df_weights, key)\n",
    "        except:\n",
    "            print(f'ERROR with {key}, retry.')\n",
    "            df_models, df_weights = logit(splits[0].drop(columns=['Crime Solved']),splits[2], splits[1], splits[3], df_models, df_weights, key)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparing the Split Methods\n",
    "\n",
    "Reviewing the model statistics based on the split types, majority of all the models all have similar accuracy, precision, and AUC scores. All models performed similarly, with nearly perfect accuracies. \n",
    "\n",
    "When reviewing the K-fold and stratified sample splits, the fluctuations in metrics are minimal, with little to no significant changes. \n",
    "\n",
    "The AUC scores indicate the potential for overfitting. Depite this, the ROC Curve and confusion matrix below explains the reasoning for the high scores. \n",
    "\n",
    "Due to the litte differences in splits, the orignal scaled dataset progresses for further analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>AUC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Original Scaled</td>\n",
       "      <td>0.999657</td>\n",
       "      <td>0.999675</td>\n",
       "      <td>0.999533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>K-fold</td>\n",
       "      <td>0.999571</td>\n",
       "      <td>0.999755</td>\n",
       "      <td>0.999531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>K-fold</td>\n",
       "      <td>0.999914</td>\n",
       "      <td>0.999878</td>\n",
       "      <td>0.999857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>K-fold</td>\n",
       "      <td>0.999486</td>\n",
       "      <td>0.999635</td>\n",
       "      <td>0.999383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stratified</td>\n",
       "      <td>0.999714</td>\n",
       "      <td>0.999837</td>\n",
       "      <td>0.999687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Shuffle Split</td>\n",
       "      <td>0.999857</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Shuffle Split</td>\n",
       "      <td>0.999429</td>\n",
       "      <td>0.999795</td>\n",
       "      <td>0.999456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Shuffle Split</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Down Sample</td>\n",
       "      <td>0.999729</td>\n",
       "      <td>0.999943</td>\n",
       "      <td>0.999750</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             model  accuracy  precision       AUC\n",
       "0  Original Scaled  0.999657   0.999675  0.999533\n",
       "1           K-fold  0.999571   0.999755  0.999531\n",
       "2           K-fold  0.999914   0.999878  0.999857\n",
       "3           K-fold  0.999486   0.999635  0.999383\n",
       "4       Stratified  0.999714   0.999837  0.999687\n",
       "5    Shuffle Split  0.999857   1.000000  0.999898\n",
       "6    Shuffle Split  0.999429   0.999795  0.999456\n",
       "7    Shuffle Split  1.000000   1.000000  1.000000\n",
       "8      Down Sample  0.999729   0.999943  0.999750"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Model Statistics\n",
    "df_models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ROC Curve\n",
    "The ROC curve has an AUC of 1.0, indicating a highly accurate model. In the confusion matrix below, the high accuracy is shown to not be due to overfitting and likely due to perpetrator data being present in the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "lgt = LogisticRegression(penalty='l2', C=1.0, class_weight=None, solver='liblinear')\n",
    "lgt.fit(x_train,y_train)  # train object\n",
    "y_hat = lgt.predict(x_test) # get test set precitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the ROC curve from logistic regression\n",
    "logit_roc_auc = roc_auc_score(y_test, y_hat)\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_hat)\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver operating characteristic')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('Log_ROC')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix\n",
    "\n",
    "Initially, an accuracy, precision, and sensitivity/specificity score of 1 is daunting and reveals that the model may be overfitting, but the confusion matrix below shows the data is misclassifying 8 cases. The reason for why the model is high in accuracy is due to the fact that the perpetrator data is present, where missing data is a significant indication that the perpetrator has yet to be found. Another model that would potentially be more applicable is a model based only on the victim data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orignal Scaled Train/Test Split Confusion Matrix\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print('Orignal Scaled Train/Test Split Confusion Matrix')\n",
    "\n",
    "plot_confusion_matrix(lgt, x_test, y_test)  \n",
    "plt.show()  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression Excluding Perpetrator Data\n",
    "---\n",
    "\n",
    "Due to the perpetrator data being highly significant, the models are returning a near 100% accuracy. In cases which are just discovered, demographics of the homicide excluding perpetrator victim data may be a more applicable model. Below, the test/train splits are rerun on victim data only. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 Support Vector Machine<a id='support-vector-machine'></a>\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our main objective was to determine which homicide cases (support vectors) our SVM model struggles to classify correctly.  For example, we might see that all our support vectors have older victim ages compared to the training data set.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scale test/train predictors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We reuse the optimal parameters determined from the previous hyperparameter tuning. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reusing the optimal parameters for this test set results in 99.97% True Positive Rate and 99.97% True Negative Rate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read the original dataset back in to get the categorical variables in non-dummy/non-OHE form for visualization."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The SVM classifier returns the indices of the training set that are support vectors.  If we get the training data rows with those indices, we can get the instances that our model considers support vectors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Merge the support vector dataframe with the original dataset to get all the original variables.  We will use these original variables to see which additional variables help separate unsolved crimes and solved crimes within our support vectors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Support Vectors are instances that are difficult for the model to classify correctly.  For example, having a value of 1 for Relationship_Unknown has around a 10% chance of crime being solved for all **Training Data**.  But when training data is filtered to only **Support Vectors** , having a Relationship_Unknown of 1 has around 50/50 chance of crime solved.  This pattern repeats itself for the other 3 features."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Model Analysis <a id='model-analysis'></a>\n",
    "---\n",
    "Discuss the advantages of each model for each classification task. Does one type\n",
    "of model offer superior performance over another in terms of prediction accuracy? In terms of\n",
    "training time or efficiency? Explain in detail. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Logistic Regression Weights<a id='logistic-regression-weights'></a>\n",
    "---\n",
    "\n",
    "The table below displays the top 10 most significant attributes according to the original logistic model. After the top 5 attributes, the difference in weights drop and all values stay between 0.5-1.0. Interpretation will be focused on the top 5 due to them having the greatest differences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>attribute</th>\n",
       "      <th>weight</th>\n",
       "      <th>model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12020</th>\n",
       "      <td>Perpetrator Sex_Male</td>\n",
       "      <td>4.300583</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12019</th>\n",
       "      <td>Perpetrator Sex_Female</td>\n",
       "      <td>2.349014</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1724</th>\n",
       "      <td>Agency Code_FL04201</td>\n",
       "      <td>0.974260</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1874</th>\n",
       "      <td>Agency Code_FL06400</td>\n",
       "      <td>0.970044</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1661</th>\n",
       "      <td>Agency Code_FL02901</td>\n",
       "      <td>0.947315</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    attribute    weight  model\n",
       "12020    Perpetrator Sex_Male  4.300583      1\n",
       "12019  Perpetrator Sex_Female  2.349014      1\n",
       "1724      Agency Code_FL04201  0.974260      1\n",
       "1874      Agency Code_FL06400  0.970044      1\n",
       "1661      Agency Code_FL02901  0.947315      1"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_weight_os = df_weights.loc[df_weights['model'] == 'Original Scaled']\n",
    "weights = df_weight_os.groupby(['attribute', 'weight']).count().reset_index()\n",
    "weights_t10 = weights.sort_values(by='weight', ascending=False).head(10)\n",
    "weights_t10.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Perpetrator Sex_Male***\n",
    "\n",
    "Males account for more than half of the perpetrators who commit homicide, according to the dataset. Statically, over 60% of the crime solved have male perpetrators. While female perpetrators also have a significant number of cases solved, many cases which are unknown go unsolved. Statically speaking, less than 0.001% of cases with male perpetrators go unsolved, and majority of perpetrators are male. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Perpetrator Sex</th>\n",
       "      <th>Crime Solved</th>\n",
       "      <th>Record ID</th>\n",
       "      <th>Percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Female</td>\n",
       "      <td>1</td>\n",
       "      <td>48543</td>\n",
       "      <td>0.076032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>0.000092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Male</td>\n",
       "      <td>1</td>\n",
       "      <td>399482</td>\n",
       "      <td>0.625702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>190218</td>\n",
       "      <td>0.297935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>147</td>\n",
       "      <td>0.000230</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Perpetrator Sex  Crime Solved  Record ID  Percentage\n",
       "0          Female             0          5    0.000008\n",
       "1          Female             1      48543    0.076032\n",
       "2            Male             0         59    0.000092\n",
       "3            Male             1     399482    0.625702\n",
       "4         Unknown             0     190218    0.297935\n",
       "5         Unknown             1        147    0.000230"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sex = pd.DataFrame(df.groupby(['Perpetrator Sex', 'Crime Solved']).count()['Record ID']).reset_index()\n",
    "df_sex['Percentage'] = [(x/len(df)) for x in df_sex['Record ID']]\n",
    "df_sex"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Agency Code_FL01602***\n",
    "\n",
    "Agency Name: Jacksonville<br>\n",
    "City: Duval<br>\n",
    "State: Florida<br>\n",
    "\n",
    "Initially, when reviewing the agency code, the difference in the cases solved is not apparent. The data cases solved vs. unsolved are nearly are 50/50 split. ***<span style=\"color:red\">RETURN TO THIS</span>***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Record ID</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Agency Code</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Crime Solved</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">FL01602</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Duval</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Florida</th>\n",
       "      <th>0</th>\n",
       "      <td>1198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        Record ID\n",
       "Agency Code City  State   Crime Solved           \n",
       "FL01602     Duval Florida 0                  1198\n",
       "                          1                  2018"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(df.loc[df['Agency Code'] == 'FL01602'].groupby(['Agency Code'\n",
    "                                                , 'City', 'State', 'Crime Solved']).count()['Record ID'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Perpetrator Sex_Female***\n",
    "\n",
    "This again refers back to the male perpetrators. Female perpetrators also have a significant number of cases solved, again with less than 0.001% of cases going unsolved. The trend appears to be that if the perpetrator sex is unknown, this is liekly due to the perprator not yet being identified. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Perpetrator Age***\n",
    "\n",
    "A perpetrator's age of 0 indicates that the homicide case has not been solved. This is intuitive since a perpetrator of age less than 1 is highly unlikely. The age of 0 indicates that the case has not been solved, with 0 being equivalent to unknown. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Record ID</th>\n",
       "      <th>Agency Code</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Agency Type</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Incident</th>\n",
       "      <th>Crime Type</th>\n",
       "      <th>...</th>\n",
       "      <th>Perpetrator Ethnicity</th>\n",
       "      <th>Relationship</th>\n",
       "      <th>Weapon</th>\n",
       "      <th>Victim Count</th>\n",
       "      <th>Perpetrator Count</th>\n",
       "      <th>Record Source</th>\n",
       "      <th>Victim_Age_Group</th>\n",
       "      <th>Perpetrator_Age_Group</th>\n",
       "      <th>Perpetrator_Race_Ethnicity</th>\n",
       "      <th>Relationship_Group</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Perpetrator Age</th>\n",
       "      <th>Crime Solved</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
       "      <th>0</th>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>...</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "      <td>189628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>...</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "      <td>26700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Record ID  Agency Code  Agency Name  \\\n",
       "Perpetrator Age Crime Solved                                        \n",
       "0               0                189628       189628       189628   \n",
       "                1                 26700        26700        26700   \n",
       "\n",
       "                              Agency Type    City   State    Year   Month  \\\n",
       "Perpetrator Age Crime Solved                                                \n",
       "0               0                  189628  189628  189628  189628  189628   \n",
       "                1                   26700   26700   26700   26700   26700   \n",
       "\n",
       "                              Incident  Crime Type  ...  \\\n",
       "Perpetrator Age Crime Solved                        ...   \n",
       "0               0               189628      189628  ...   \n",
       "                1                26700       26700  ...   \n",
       "\n",
       "                              Perpetrator Ethnicity  Relationship  Weapon  \\\n",
       "Perpetrator Age Crime Solved                                                \n",
       "0               0                            189628        189628  189628   \n",
       "                1                             26700         26700   26700   \n",
       "\n",
       "                              Victim Count  Perpetrator Count  Record Source  \\\n",
       "Perpetrator Age Crime Solved                                                   \n",
       "0               0                   189628             189628         189628   \n",
       "                1                    26700              26700          26700   \n",
       "\n",
       "                              Victim_Age_Group  Perpetrator_Age_Group  \\\n",
       "Perpetrator Age Crime Solved                                            \n",
       "0               0                       189628                 189628   \n",
       "                1                        26700                  26700   \n",
       "\n",
       "                              Perpetrator_Race_Ethnicity  Relationship_Group  \n",
       "Perpetrator Age Crime Solved                                                  \n",
       "0               0                                 189628              189628  \n",
       "                1                                  26700               26700  \n",
       "\n",
       "[2 rows x 26 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['Perpetrator Age', 'Crime Solved']).count().head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Agency Code_FL01100***\n",
    "\n",
    "Agency Name: Collier<br>\n",
    "City: Collier<br>\n",
    "State: Florida<br>\n",
    "\n",
    " ***<span style=\"color:red\">RETURN TO THIS</span>***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Record ID</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Agency Code</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Crime Solved</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">FL01100</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Collier</th>\n",
       "      <th rowspan=\"2\" valign=\"top\">Florida</th>\n",
       "      <th>0</th>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Record ID\n",
       "Agency Code City    State   Crime Solved           \n",
       "FL01100     Collier Florida 0                    99\n",
       "                            1                   254"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(df.loc[df['Agency Code'] == 'FL01100'].groupby(['Agency Code'\n",
    "                                                , 'City', 'State', 'Crime Solved']).count()['Record ID'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ***Plot***<br>\n",
    "Visual representation of the top 10 attributes. Perpetrator males have the highest wieghts, of which the significance dros more than 1.5 points. The next significant drop is nearly 1 point, with the remainder top 10 attributes dropping less than 0.5 points. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], <a list of 10 Text xticklabel objects>)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('bmh')\n",
    "\n",
    "plt.bar(x=weights_t10['attribute'], height = weights_t10['weight'])\n",
    "plt.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 Support Vectors<a id='support-vectors'></a>\n",
    "---\n",
    "***Kris & Walter***<br>\n",
    "Look at the chosen support vectors for the classification task. Do these provide\n",
    "any insight into the data? Explain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# selectedFeaturesNoId = [f for f in selectedFeatures if f not in ['Record ID','Crime Solved']]\n",
    "# scl_obj = StandardScaler()\n",
    "# scl_obj.fit(x_train[selectedFeaturesNoId])\n",
    "# X_train_scaled = scl_obj.transform(x_train[selectedFeaturesNoId]) # apply to training\n",
    "# X_test_scaled = scl_obj.transform(x_test[selectedFeaturesNoId])\n",
    "X_train_scaled = ds_x_train\n",
    "X_test_scaled = ds_x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# From Hyperparameter Tuning \n",
    "from sklearn.svm import SVC\n",
    "svmClassifier = SVC(random_state=0,\n",
    "                    C= 100,\n",
    "                    gamma=0.0001,\n",
    "                     kernel='rbf')\n",
    "svmClassifier.fit(X_train_scaled,ds_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[14023,     3],\n",
       "       [   18, 52362]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = svmClassifier.predict(X_test_scaled)\n",
    "confusion_matrix(ds_y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# originalDf = pd.read_csv('../Data/database.csv')\n",
    "originalDf = df\n",
    "originalDfSample = originalDf.sample(95000, random_state=2)\n",
    "originalDfSampleTrain = originalDfSample.iloc[train_ind]\n",
    "df_training_merge = pd.concat([ds_x_train,originalDfSampleTrain],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get Support Vector Indices\n",
    "df_support = df_training_merge.iloc[svmClassifier.support_]\n",
    "df_support['Crime Solved'] = ds_y_train.iloc[svmClassifier.support_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_support_merge = df_support.merge(originalDf, on=None, left_index=True, right_index=True, how='inner')\n",
    "df_training_merge = df_training.merge(originalDf, on=None, left_index=True, right_index=True, how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x1152 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#https://jakevdp.github.io/PythonDataScienceHandbook/04.08-multiple-subplots.html\n",
    "#Data Mining Notebooks 04. Logits and SVM Eric Larson\n",
    "#https://github.com/jakemdrew/DataMiningNotebooks\n",
    "fig=plt.figure()\n",
    "fig.set_size_inches(16, 16)\n",
    "fig.subplots_adjust(hspace=0.4, wspace=0.4)\n",
    "\n",
    "# vars_to_plot = ['Relationship_Unknown','Perpetrator Age_0','Perpetrator Sex_Male','Perpetrator Sex_Unknown']\n",
    "vars_to_plot = ['Perpetrator Sex_Male','Perpetrator Sex_Unknown']\n",
    "for i in range(len(vars_to_plot)):\n",
    "    subplot_index = 2 * (i+1)\n",
    "    ax=fig.add_subplot(4,2,subplot_index-1)\n",
    "    pd.crosstab(df_support_merge[vars_to_plot[i]],\n",
    "                df_support_merge['Crime Solved_x']).plot(\n",
    "        kind='barh', stacked=True, ax=ax\n",
    "    )\n",
    "    ax.set_title(vars_to_plot[i] + ' Support Vectors',\n",
    "                fontsize=20)\n",
    "    ax=fig.add_subplot(4,2,subplot_index)\n",
    "    pd.crosstab(df_training_merge[vars_to_plot[i]],\n",
    "                df_training_merge['Crime Solved_x']).plot(\n",
    "        kind='barh', stacked=True, ax=ax\n",
    "    )\n",
    "    ax.set_title(vars_to_plot[i] + ' Training Data',\n",
    "                fontsize=20)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
